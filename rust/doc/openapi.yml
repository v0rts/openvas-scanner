openapi: "3.0.3"
info:
  title: "Scanner"
  description: "
    # Authentication

    The API supports two kinds of authentication methods:

    - API Key

    - Certificates


    The authentication modes are set within a configuration file or via the argument list, when starting the server.

    The authentication is required for each request except for a HEAD request.

    ## API Key

    An API key is a token that the client provides when doing API requests and are used to authorize access.
    The `SCANNER-API-KEY` must be in the header.


    <!--More details about this method follows with its implementation.-->


    ## Certificates

    This option uses [X.509](https://en.wikipedia.org/wiki/X.509), based on CA to verify derived certificates to allow access.


    <!--More details about this method follows with its implementation.-->
    "
  contact:
    name: "Greenbone AG"
    url: "https://www.greenbone.net/"
  license:
    name: "GPL-2.0-or-later"
    url: "https://spdx.org/licenses/GPL-2.0-or-later.html"
  version: "0.1"
servers:
  - url: /
tags:
  - name: general
    description: General requests
  - name: scan
    description: Scan resource
  - name: feed
    description: Feed related
paths:
  /:
    head:
      description: "Get the response header. It contains the API version, feed version and available authentication methods."
      operationId: "get_info"
      tags:
        - "general"
      responses:
        "200":
          headers:
            api-version:
              description: "Comma separated list of available API versions"
              schema:
                type: "string"
            feed-version:
              description: "The version of the VT feed"
              schema:
                type: "string"
            authentication:
              description: "Supported authentication methods"
              schema:
                type: "string"
          description: "Header"

  /scans:
    post:
      description: "This request just creates the scan. It can be started afterwards with the scan_action request."
      operationId: "create_scan"
      tags:
        - "scan"
      requestBody:
        description: "Scan to add"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Scan"
            examples:
              schema:
                description: "Schema of a Scan."
              create simple scan:
                $ref: "#/components/examples/scan_simple"
              create complex scan:
                $ref: "#/components/examples/scan_full"
      responses:
        "201":
          description: "Scan created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScanID"
              examples:
                created scan:
                  $ref: "#/components/examples/scan_id"
        "400":
          description: "Bad Request body"

  /scans/{id}:
    get:
      description: "Get a scan from the scan manager."
      operationId: "get_scan"
      tags:
        - "scan"
      parameters:
        - $ref: "#/components/parameters/ScanID"
      responses:
        "200":
          description: "Get Scan"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Scan"
              examples:
                scan:
                  $ref: "#/components/examples/scan_full"

        "404":
          description: "Scan not found"

    post:
      description: "Perform an action to a scan."
      operationId: "scan_action"
      tags:
        - "scan"
      parameters:
        - $ref: "#/components/parameters/ScanID"
      requestBody:
        description: "Action to perform."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScanAction"
            examples:
              start scan:
                $ref: "#/components/examples/scan_action_start"
              stop scan:
                $ref: "#/components/examples/scan_action_stop"
      responses:
        "204":
          description: "Action performed"
        "400":
          description: "Bad request body"
        "404":
          description: "Scan not found"
        "406":
          description: "Unable to perform action because of the current scan status"
        "501":
          description: "Action not supported"

    delete:
      description: "Delete a scan from the scan manager."
      operationId: "delete_scan"
      tags:
        - "scan"
      parameters:
        - $ref: "#/components/parameters/ScanID"
      responses:
        "200":
          description: "Scan deleted"
        "404":
          description: "Scan not found"
        "406":
          description: "A running scan cannot be deleted"

  /scans/{id}/results:
    get:
      description: "Get results from a scan."
      operationId: "get_results"
      tags:
        - "scan"
      parameters:
        - $ref: "#/components/parameters/ScanID"
        - name: range
          in: query
          description: "Get a range of results (e.g. `0-12`).
            In case only a single number is given (e.g. `13`), all available results from this index on are returned.
            If the scan is still running, new results will occur and must be collected with new request starting from the last processed index.
            If no results are in the given range, an empty array is returned."
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "A list of results"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Result"
              examples:
                schema:
                  description: "Schema of a list of results response"
                get results 0-3:
                  $ref: "#/components/examples/scan_results"

        "400":
          description: "Bad range format"
        "404":
          description: "Scan not found"
        "406":
          description: "A scan, that has not started, does not contain results"

  /scans/{id}/results/{rid}:
    get:
      description: "Get a specific result from the scan."
      operationId: "get_result"
      tags:
        - "scan"
      parameters:
        - $ref: "#/components/parameters/ScanID"
        - $ref: "#/components/parameters/ResultID"
      responses:
        "200":
          description: "The requested result"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
              examples:
                schema:
                  description: "Schema of a result"
                get result 3:
                  $ref: "#/components/examples/scan_result"
        "404":
          description: "Result or Scan not found"
        "406":
          description: "A scan that has not started, cannot contain results"

  /scans/{id}/status:
    get:
      description: "Get the current status of a scan."
      operationId: "get_scan_status"
      tags:
        - "scan"
      parameters:
        - $ref: "#/components/parameters/ScanID"
      responses:
        "200":
          description: "The requested status"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
              examples:
                schema:
                  description: "Schema of a status response."
                status of a queued scan:
                  $ref: "#/components/examples/scan_status_queued"
                status of a running scan:
                  $ref: "#/components/examples/scan_status_running"
                status of a succeeded scan:
                  $ref: "#/components/examples/scan_status_success"
                status of a failed scan:
                  $ref: "#/components/examples/scan_status_fail"
        "404":
          description: "Scan not found"

  /vts:
    get:
      description: "Get a Identifier list of all VTs that are available to the scanner."
      operationId: "get_vts"
      tags:
        - "feed"
      responses:
        "200":
          description: "A list of available VTs."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
              examples:
                list of OIDs:
                  $ref: "#/components/examples/list_of_oids"
        "503":
          description: "The list of OIDs is currently updated. Please try again later."

components:
  parameters:
    ScanID:
      name: id
      in: path
      description: "ID of a Scan"
      required: true
      schema:
        type: "string"
    ResultID:
      name: rid
      in: path
      description: "ID of a Result"
      required: true
      schema:
        type: "string"

  schemas:
    ScanID:
      description: "A scan ID to identify a scan."
      type: "string"

    Scan:
      description: "Model representing a scan."
      type: "object"
      properties:
        scan_id:
          description: "The scan ID for a scan to create. If left empty, an ID is automatically generated. Must be a UUIDv4."
          $ref: "#/components/schemas/ScanID"
        target:
          description: "The target to scan"
          $ref: "#/components/schemas/Target"
        scanner_parameters:
          description: "Overwrite the default settings of the Scanner."
          type: "array"
          items:
            $ref: "#/components/schemas/Parameter"
        vts:
          type: "array"
          description: "A collection of VTs, which are run for the given target."
          items:
            $ref: "#/components/schemas/VT"
      required:
        - target
        - vts

    Target:
      description: "A target is a list of hosts to scan, including their UDP and TCP ports. Additionally for further access to the systems credentials can be given."
      type: "object"
      properties:
        hosts:
          description: "A list of hosts."
          type: "array"
          items:
            description: "Contains either an IPv4, IPv6, IPv4 range, IPv6 range, IPv4 CIDR, IPv6 CIDR or hostname."
            type: "string"
        ports:
          description: "A list of ports."
          type: "array"
          items:
            $ref: "#/components/schemas/PortRange"
        credentials:
          description: "A list of credentials used for further access to a target system."
          type: "array"
          items:
            $ref: "#/components/schemas/Credential"
        alive_test_ports:
          description: "Dedicated port list for alive detection. Used for TCP-SYN and TCP-ACK ping when Boreas is enabled."
          type: "array"
          items:
            $ref: "#/components/schemas/PortRange"
        alive_test_methods:
          description: "List of alive test to be performed against the target. Can be one or a combination of icmp, tcp_syn, tcp_ack, arp, consider_alive methods"
          type: "array"
          items:
            $ref: "#/components/schemas/AliveTestMethod"
        reverse_lookup_unify:
          description: "If multiple IP addresses resolve to the same DNS name the DNS name will only get scanned once."
          type: "boolean"
        reverse_lookup_only:
          description: "Only scan IP addresses that can be resolved into a DNS name."
          type: "boolean"
      required:
        - hosts
        - ports

    AliveTestMethod:
      description: "Alive test method to be performed against the target"
      type: "string"
      enum:
        - icmp
        - tcp_syn
        - tcp_ack
        - arp
        - consider_alive

    PortRange:
      description: "A port range for either UDP or TCP ports"
      type: "object"
      properties:
        protocol:
          description: "The protocol for the port range. If missing the port range is applied for UDP and TCP."
          type: "string"
          enum:
            - udp
            - tcp
        range:
          description: "A comma separated list of port options. A port option is either a single port or a port range given with two numbers with a hyphen."
          type: "string"
      required:
        - range

    Credential:
      description: "Data for authentication for a target system."
      type: "object"
      properties:
        service:
          description: "The service used for authentication."
          type: "string"
          enum:
            - ssh
            - smb
            - esxi
            - snmp
        port:
          description: "The port the authentication service is running."
          type: "integer"
          format: "int32"
        up:
          $ref: "#/components/schemas/UP"
        usk:
          $ref: "#/components/schemas/USK"
        snmp:
          $ref: "#/components/schemas/SNMP"

    UP:
      description: "Authentication via Username and Password."
      type: "object"
      properties:
        username:
          description: "Username for authentication."
          type: "string"
        password:
          description: "Password for authentication."
      required:
        - username

    USK:
      description: "Authentication via Username and Security Key."
      type: "object"
      properties:
        username:
          description: "Username for authentication."
          type: "string"
        password:
          description: "Password for Security Key."
          type: "string"
        private:
          description: "SSH private key."
          type: "string"
      required:
        - username
        - private

    SNMP:
      description: "Authentication via SNMP."
      type: "object"
      properties:
        username:
          description: "Username for SNMP authentication."
          type: "string"
        password:
          description: "Password for SNMP authentication."
          type: "string"
        community:
          description: "Community string for SNMP authentication."
          type: "string"
        auth_algorithm:
          description: "Algorithm for SNMP authentication."
          type: "string"
          enum:
            - md5
            - sha1
        privacy_password:
          description: "Privacy Password for SNMP authentication."
          type: "string"
        privacy_algorithm:
          description: "Algorithm used for encrypting privacy password."
          type: "string"
          enum:
            - aes
            - des

    Parameter:
      description: "Consists of a parameter ID and its value."
      type: "object"
      properties:
        id:
          description: "ID of the parameter to set."
          type: "integer"
          format: "int32"
        value:
          description: "Value of the parameter."
          type: "string"
      required:
        - value
        - id

    VT:
      description: "A single VT and its parameters."
      type: "object"
      properties:
        oid:
          description: "The identifier for a VT"
          type: "string"
        parameters:
          description: "A list of parameters for the VT. In case a VT has parameters but these are not set here, then the defaults will be applied. A default exists for any parameter."
          type: "array"
          items:
            $ref: "#/components/schemas/Parameter"

    Result:
      description: "A result of a Scan"
      type: "object"
      properties:
        id:
          description: "An ID, which is unique for the scan. It is auto incremental and starts at 0 for the first result."
          type: "integer"
          format: "int32"
        result:
          description: "The type of the result."
          type: "string"
          enum:
            - alarm
            - log
            - error
            - host_start
            - host_stop
        ip_address:
          description: "The IPv4 or IPv6 of the target the result was found."
          type: "string"
        hostname:
          description: "The hostname of the target the result was found."
          type: "string"
        oid:
          description: "The identifier of the VT in which found the result."
          type: "string"
        port:
          description: "The port that was used to find the result."
          type: "integer"
          format: "int32"
        protocol:
          description: "The protocol that was used to find the result, corresponding to the port."
          type: "string"
          enum:
            - udp
            - tcp
        message:
          description: "Additional information about the result."
          type: "string"
      required:
        - type

    Status:
      description: "The status of a scan"
      type: "object"
      properties:
        start_time:
          description: "A UNIX time format describing when the scan started."
          type: "integer"
          format: "int32"
        end_time:
          description: "A UNIX time format describing when the scan ended."
          type: "integer"
          format: "int32"
        status:
          description: "In which phase the scan is currently in."
          type: "string"
          enum:
            - requested
            - running
            - stopped
            - failed
            - succeeded
        host_info:
          $ref: "#/components/schemas/HostInfo"
      required:
        - status

    HostInfo:
      description: "Information about the progress for each host of the scan."
      type: "object"
      properties:
        all:
          description: "The number of host in the target of the scan."
          type: "integer"
          format: "int32"
        excluded:
          description: "The number of hosts excluded from the target if the scan."
          type: "integer"
          format: "int32"
        dead:
          description: "The number of host detected as not reachable."
          type: "integer"
          format: "int32"
        alive:
          description: "The number of hosts that are reachable and will be scanned."
          type: "integer"
          format: "int32"
        queued:
          description: "The number of hosts that are waiting to be scanned."
          type: "integer"
          format: "int32"
        finished:
          description: "The number hosts that are finished with scanning."
          type: "integer"
          format: "int32"
        scanning:
          description: "The IP Addresses of the currently scanned hosts."
          type: "array"
          items:
            type: "string"

      required:
        - all
        - excluded
        - dead
        - alive
        - queued
        - finished

    Reference:
      description: "A reference for a VT."
      type: "object"
      properties:
        ref_type:
          description: "Type of a reference."
          type: "string"
        value:
          description: "Value of a reference."
          type: "string"
      required:
        - ref_type
        - value

    Severity:
      description: "A severity."
      type: "object"
      properties:
        version:
          description: "The version of the severity."
          type: "string"
          enum:
            - cvss_base_v2
            - cvss_base_v3
        vector:
          description: "The severity vector."
          type: "string"
        date:
          description: "A UNIX format timestamp."
          type: "integer"
          format: "int32"
      required:
        - version
        - vector
        - date

    ScanAction:
      description: "An action to perform on a scan"
      type: "object"
      properties:
        action:
          description: "The action to perform"
          type: "string"
          enum:
            - start
            - stop
      required:
        - "action"

  examples:
    scan_simple:
      description: "A simple example for creating a scan."
      value:
        {
          "target": { "hosts": ["127.0.0.1"], "ports": [{ "range": "22" }] },
          "vts": [{ "oid": "1.3.6.1.4.1.25623.1.0.10267" }],
        }
    scan_full:
      description: "A complex example for creating a scan, that uses all available fields."
      value:
        {
          "scan_id": "6c591f83-8f7b-452a-8c78-ba35779e682f",
          "target":
            {
              "hosts":
                [
                  "127.0.0.1",
                  "192.168.0.1-15",
                  "10.0.5.0/24",
                  "::1",
                  "2001:db8:0000:0000:0000:0000:0000:0001-00ff",
                  "2002::1234:abcd:ffff:c0a8:101/64",
                  "examplehost",
                ],
              "ports":
                [
                  { "protocol": "udp", "range": "22, 1024-1030" },
                  { "protocol": "tcp", "range": "24-30" },
                  { "range": "100-1000" },
                ],
              "credentials":
                [
                  {
                    "service": "ssh",
                    "port": 22,
                    "usk":
                      {
                        "username": "user",
                        "password": "pw",
                        "private": "ssh-key...",
                      },
                  },
                  {
                    "service": "smb",
                    "up": { "username": "user", "password": "pw" },
                  },
                  {
                    "service": "snmp",
                    "snmp":
                      {
                        "username": "user",
                        "password": "pw",
                        "community": "my_community",
                        "auth_algorithm": "md5",
                        "privacy_password": "priv_pw",
                        "privacy_algorithm": "aes",
                      },
                  },
                ],
              "alive_test_ports":
                [{ "protocol": "tcp", "range": "1-100" }, { "range": "443" }],
              "alive_test_methods":
                ["icmp", "tcp_syn", "tcp_ack", "arp", "consider_alive"],
              "reverse_lookup_unify": true,
              "reverse_lookup_only": false,
            },
          "scanner_parameters":
            [
              { "id": "target_port", "value": "443" },
              { "id": "use_https", "value": "1" },
              { "id": "profile", "value": "fast_scan" },
            ],
          "vts":
            [
              {
                "oid": "1.3.6.1.4.1.25623.1.0.10662",
                "parameters":
                  [{ "id": 1, "value": "200" }, { "id": 2, "value": "yes" }],
              },
              { "oid": "1.3.6.1.4.1.25623.1.0.10330" },
            ],
        }
    scan_id:
      description: "The ID of the created scan"
      value: "6c591f83-8f7b-452a-8c78-ba35779e682f"
    scan_action_start:
      description: "Start a scan"
      value: { "action": "start" }
    scan_action_stop:
      description: "Stop a running scan"
      value: { "action": "stop" }

    scan_results:
      description: "Example for getting results.
        The query range for this example could be either

        - 0-3

        - 0

        - missing


        In case it is 0 or missing the running scan has only generated 4 results so far."
      value:
        [
          {
            "id": 0,
            "type": "host_start",
            "ip_address": "127.0.0.1",
            "port": 22,
            "protocol": "tcp",
            "message": "Thu Mar 23 15:16:37 2023",
          },
          {
            "id": 1,
            "type": "error",
            "ip_address": "127.0.0.1",
            "hostname": "localhost",
            "protocol": "tcp",
            "message": "MQTT initialization failed",
          },
          {
            "id": 2,
            "type": "log",
            "ip_address": "127.0.0.1",
            "hostname": "localhost",
            "oid": "1.3.6.1.4.1.25623.1.0.117628",
            "port": 22,
            "protocol": "tcp",
            "message": "FTP is enabled on the remote SSH service.",
          },
          {
            "id": 3,
            "type": "alarm",
            "ip_address": "127.0.0.1",
            "hostname": "localhost",
            "oid": "1.3.6.1.4.1.25623.1.0.147696",
            "protocol": "tcp",
            "message": "Installed version: 9.53.3\nFixed version:     9.55\nInstallation\npath / port:       /usr/bin/gs",
          },
        ]

    scan_result:
      description: "Example for getting a single result. The Result ID in the request path was set to 3."
      value:
        {
          "id": 3,
          "type": "alarm",
          "ip_address": "127.0.0.1",
          "hostname": "localhost",
          "oid": "1.3.6.1.4.1.25623.1.0.147696",
          "protocol": "tcp",
          "message": "Installed version: 9.53.3\nFixed version:     9.55\nInstallation\npath / port:       /usr/bin/gs",
        }

    scan_status_queued:
      description: "Status of a queued Scan"
      value: { "status": "queued" }

    scan_status_running:
      description: "Status of a running Scan"
      value:
        {
          "start_time": 1679649183,
          "status": "running",
          "host_info":
            {
              "all": 14,
              "excluded": 0,
              "dead": 4,
              "alive": 6,
              "queued": 1,
              "finished": 1,
              "scanning": ["127.0.0.1", "10.0.5.1", "10.0.5.2", "10.0.5.3"],
            },
        }

    scan_status_success:
      description: "Status of a successfully finished Scan"
      value:
        {
          "start_time": 1679649183,
          "end_time": 1679656139,
          "status": "succeeded",
          "host_info":
            {
              "all": 14,
              "excluded": 0,
              "dead": 4,
              "alive": 10,
              "queued": 0,
              "finished": 10,
            },
        }

    scan_status_fail:
      description: "Status of an interrupted Scan. Except for the status, a stopped scan could look like the same."
      value:
        {
          "start_time": 1679649183,
          "end_time": 1679656139,
          "status": "failed",
          "host_info":
            {
              "all": 14,
              "excluded": 0,
              "dead": 4,
              "alive": 10,
              "queued": 1,
              "finished": 8,
            },
        }

    list_of_oids:
      description: "
        A small list of OIDs for requesting the available VTs.
        For a regular feed this is typically over 100K OIDs."
      value:
        [
          "1.3.6.1.4.1.25623.1.0.100196",
          "1.3.6.1.4.1.25623.1.0.100127",
          "1.3.6.1.4.1.25623.1.0.10441",
          "1.3.6.1.4.1.25623.1.0.100313",
        ]
