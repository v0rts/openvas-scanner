name: "openvas-c"

on:
  push:
    branches: [ main, stable ]
  pull_request:
    branches: [ main, stable ]

jobs:
  formatting:
    runs-on: ubuntu-latest
    steps:
      - name: Check out openvas-scanner
        uses: actions/checkout@v4
      - name: Check Source Format
        run: |
          clang-format -i -style=file {src,misc,nasl}/*.{c,h}
          git diff --exit-code
  compile:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # With the upcoming changes, we require both downwards and upwards compatibility between the OpenVAS C
        # code and GVM-libs. This is because, even though we will be using semantic versioning, as long as
        # OpenVAS and GVM-libs remain separate repositories, we want to be notified of every change.
        gvm-libs-version:
          - stable
          - unstable
    container: greenbone/gvm-libs:${{ matrix.gvm-libs-version }}
    steps:
      - uses: actions/checkout@v4
      - name: install dependencies
        run: |
          sh .github/install-openvas-dependencies.sh
      - name: Configure and Scan Build
        run: |
          cmake -Bbuild -DCMAKE_C_COMPILER=/usr/share/clang/scan-build-14/libexec/ccc-analyzer
          scan-build -o ~/scan-build-report cmake --build build
      - name: Upload scan-build report
        uses: actions/upload-artifact@v4
        with:
          name: scan-build-report
          path: ~/scan-build-report/
          retention-days: 7
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        gvm-libs-version:
          - stable
          - unstable
    container: greenbone/gvm-libs:${{ matrix.gvm-libs-version }}
    steps:
      - uses: actions/checkout@v4
      - name: install dependencies
        run: |
          sh .github/install-openvas-dependencies.sh
      - name: unit-tests
        run: |
          cmake -Bbuild -DCMAKE_BUILD_TYPE=Release
          CTEST_OUTPUT_ON_FAILURE=1 cmake --build build -- tests test
